### define available partitions types 
Slurm_Partition_Type=(batch long gpu bigmem)
Slurm_Partition_MaxCores=(24 24 38 48)
Slurm_Partition_MaxTime=(24:00:00 24:00:00 240:00:00 240:00:00)
Slurm_Partition_MaxMem=(240000000 240000000 400000000 1000000000)


### define getters
function getPartitionIndex()
{
	if [[ -z "$1" ]]
	then 
	 	(>&2 echo "[ERROR] slurm.cfg: getPartitionIndex() requires partition name as argument")
        exit 1
    fi
     
    x=0
    while [[ ${x} -lt ${#Slurm_Partition_Type[@]} ]]
    do
    	if [[ "${Slurm_Partition_Type[${x}]}" == $1 ]]
    	then
    		break
    	else
    		x=$((x+1))
    	fi
    done 
    
    if [[ ${x} -lt ${#Slurm_Partition_Type[@]} ]]
    then
      	echo $x
    else 
      	echo -1
    fi
}

function getPartitionMaxCores()
{
	t="$1"
	
	if [[ -z "${t}" ]]
	then 
	 	(>&2 echo "[ERROR] slurm.cfg: getPartitionMaxCores() requires partition name as argument")
        exit 1
    fi
     
    index=$(getPartitionIndex $1) 
    
    if [[ $index -lt 0 ]]
    then
    	(>&2 echo "[ERROR] slurm.cfg: getPartitionMaxCores() Unknown slurm partition $t. Must be defined in slurm.cfg!")
        exit 1
    fi 
    
    echo ${Slurm_Partition_MaxCores[${index}]}
}

function getPartitionMaxTime()
{
	t="$1"
	
	if [[ -z "${t}" ]]
	then 
	 	(>&2 echo "[ERROR] slurm.cfg: getPartitionMaxTime() requires partition name as argument")
        exit 1
    fi
     
    index=$(getPartitionIndex $1) 
    
    if [[ $index -lt 0 ]]
    then
    	(>&2 echo "[ERROR] slurm.cfg: getPartitionMaxTime() Unknown slurm partition $t. Must be defined in slurm.cfg!")
        exit 1
    fi 
    
    echo ${Slurm_Partition_MaxTime[${index}]}
}

function getPartitionMaxMem()
{
	t="$1"
	
	if [[ -z "${t}" ]]
	then 
	 	(>&2 echo "[ERROR] slurm.cfg: getPartitionMaxMem() requires partition name as argument")
        exit 1
    fi
     
    index=$(getPartitionIndex $1) 
    
    if [[ $index -lt 0 ]]
    then
    	(>&2 echo "[ERROR] slurm.cfg: getPartitionMaxMem() Unknown slurm partition $t. Must be defined in slurm.cfg!")
        exit 1
    fi 
    
    echo ${Slurm_Partition_MaxMem[${index}]}
}

function setRunInfo()
{
	if [[ $# -ne 7 ]]
 	then
	  (>&2 echo "[ERROR] slurm.cfg: setRunInfo() invalid number of arguments: Expected 7! partition mode cores mem time step tasks");
	  exit 1
	fi

	echo "partition ${1}"
	echo "mode ${2}"
	echo "cores ${3}"
	echo "mem ${4}"
	echo "time ${5}"
	# optional fields
	if [[ ${6} -gt 0 ]]
    then
		echo "step ${6}"
	fi
	if [[ ${7} -gt 0 ]]
    then
		echo "tasks ${7}"
	fi
}

function getSlurmParaMode()
{
	if [[ -z "${1}"  || ! -f $1 ]]
	then 
		(>&2 echo "[ERROR] slurm.cfg: getSlurmParaMode() requires slurmPara file as argument")
        exit 1
	fi

	grep -e "^mode " $1 | awk '{print $2}'
}

function getSlurmParaMem()
{
	if [[ -z "${1}"  || ! -f $1 ]]
	then 
		(>&2 echo "[ERROR] slurm.cfg: getSlurmParaMem() requires slurmPara file as argument")
        exit 1
	fi

	grep -e "^mem " $1 | awk '{print $2}'
}

function getSlurmParaTime()
{
	if [[ -z "${1}"  || ! -f $1 ]]
	then 
		(>&2 echo "[ERROR] slurm.cfg: getSlurmParaTime() requires slurmPara file as argument")
        exit 1
	fi

	grep -e "^time " $1 | awk '{print $2}'
}

function getSlurmParaCores()
{
	if [[ -z "${1}"  || ! -f $1 ]]
	then 
		(>&2 echo "[ERROR] slurm.cfg: getSlurmParaCores() requires slurmPara file as argument")
        exit 1
	fi

	grep -e "^cores " $1 | awk '{print $2}'
}

function getSlurmParaTasks()
{
	if [[ -z "${1}"  || ! -f $1 ]]
	then 
		(>&2 echo "[ERROR] slurm.cfg: getSlurmParaTasks() requires slurmPara file as argument")
        exit 1
	fi

	grep -e "^tasks " $1 | awk '{print $2}'
}

function getSlurmParaStep()
{
	if [[ -z "${1}"  || ! -f $1 ]]
	then 
		(>&2 echo "[ERROR] slurm.cfg: getSlurmParaStep() requires slurmPara file as argument")
        exit 1
	fi

	grep -e "^step " $1 | awk '{print $2}'
}

function getSlurmParaPartition()
{
	if [[ -z "${1}"  || ! -f $1 ]]
	then 
		(>&2 echo "[ERROR] slurm.cfg: getSlurmParaPartition() requires slurmPara file as argument")
        exit 1
	fi

	grep -e "^partition " $1 | awk '{print $2}'
}

function getSlurmRunParameter()
{
	sName=$1
	
	if [[ -z "${1}" ]]
	then 
		(>&2 echo "[ERROR] slurm.cfg: getSlurmRunParameter() requires pipeline step Name as argument")
        exit 1
	fi

	TMP="${sName}SlurmPara"
	if [[ -z ${!TMP} ]]
	then
	    TMP="defaultSlurmPara"
	fi
	if [[ -z ${!TMP} ]]
	then
		(>&2 echo "[ERROR] slurm.cfg: getSlurmRunParameter() Could not find SlurmPara for ${sName}SlurmPara and also not defaultSlurmPara. At least defaultSlurmPara must be set")
        exit 1
	fi
	
	if [[ $(eval echo \${#$(echo ${TMP})[@]}) -ne 6 ]]
 	then 
    	(>&2 echo "[ERROR] slurm.cfg: getSlurmRunParameter()  Expecting 6 fields for RunParamater array but only found [1-$(eval echo \${#$(echo ${TMP})[@]}))");
    	exit 1 
 	fi;                    
 	
 	
 	local partition=$(eval echo \${$(echo ${TMP})[0]})
 	if [[ $(getPartitionIndex ${partition}) -lt 0 ]]
 	then
 		partition=${SLURM_PARTITION}
 	fi
 	
 	if [[ $(getPartitionIndex ${partition}) -lt 0 ]]
 	then
 		(>&2 echo "[ERROR] slurm.cfg: getSlurmRunParameter()  Invalid slurm partition ${partition} for step ${sName}");
    	exit 1
 	fi
	
	local nCores=$(eval echo \${$(echo ${TMP})[1]})
	local nMem=$(eval echo \${$(echo ${TMP})[2]})
	local nTime=$(eval echo \${$(echo ${TMP})[3]})
	local steps=$(eval echo \${$(echo ${TMP})[4]})
	local tasks=$(eval echo \${$(echo ${TMP})[5]})
	
	SLURM_RUN_PARA=(${partition} ${nCores} ${nMem} ${nTime} ${steps} ${tasks})
} 