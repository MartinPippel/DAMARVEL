#!/bin/bash -e

### expect assembly-specific config file as argument 
cfg=$1 

if [[ ! -f ${cfg} ]]
then 
	(>&2 echo "DAmar.cfg requires the assembly-specific config file as argument! See exampleConfig.sh in the scripts directory ${SUBMIT_SCRIPTS_PATH}!")
     exit 1
fi

source ${cfg}

# always set current working directory (is required in most steps of each pipeline)
myCWD=$(pwd)

if [[ -z "${DB_OUTDIR}" ]]
then
	DB_OUTDIR="db"
fi

if [[ -z "${QC_OUTDIR}" ]]
then
	QC_OUTDIR="qc"
fi

if [[ -z "${CCS_NCHUNKS}" ]]
then
	CCS_NCHUNKS=10
fi

if [[ -z "${MIN_PACBIO_RLEN}" ]]
then
	MIN_PACBIO_RLEN=4000
fi

if [[ -z "${DBSPLIT_SIZE}" ]]
then
	DBSPLIT_SIZE=400
fi

if [[ -z "${RAW_REPMASK_OUTDIR}" ]]
then
	RAW_REPMASK_OUTDIR=repmask	
fi

# set some default variables
if [[ -z ${FIX_DALIGN_OUTDIR} ]]
then
	FIX_DALIGN_OUTDIR="dalign"
fi

if [[ -z ${FIX_REPCOMP_OUTDIR} ]]
then
	FIX_REPCOMP_OUTDIR="repcomp"
fi

if [[ -z ${FIX_FORCEALIGN_OUTDIR} ]]
then
	FIX_FORCEALIGN_OUTDIR="forcealign"
fi

# todo: only set this for appropriate phases
if [[ ${FIX_SCRUB_TYPE} -eq 0 ]]
then 
	FIX_SCRUB_NAME="${FIX_DALIGN_OUTDIR}"
elif [[ ${FIX_SCRUB_TYPE} -eq 1 ]]
then 
	FIX_SCRUB_NAME="${FIX_REPCOMP_OUTDIR}"
elif [[ ${FIX_SCRUB_TYPE} -eq 2 ]]
then 
	FIX_SCRUB_NAME="${FIX_FORCEALIGN_OUTDIR}"
else
	(>&2 echo "ERROR - Scrubbing Type: ${FIX_SCRUB_TYPE} unsupported!")
    exit 1		
fi

if [[ -z ${COR_DIR} ]]
then 
    COR_DIR=correction
fi

### available pipelines 

### init DB
#type-0 - steps[1-3]:  createSubdir bam2fasta createDB createStats	# LoFi
#type-1 - steps[1-6]:  createSubdir ccs samtoolsMerge bam2fasta createDB createStats	# HiFi
InitRType_0=(createSubdir bam2fasta createDB createStats)	# LoFi 
InitRType_1=(createSubdir ccs samtoolsMerge bam2fasta createDB createStats)	# HiFi 

### INIT - create DB's, data QC and stats pipelines 
#type-0 [10x - init] 							[1-4]: longrangerBasic, longrangerToScaff10Xinput, bxcheck, createStats
#type-1 [PacBio LoFi Init] 						[1-4]: bam2fasta createDB createStats
#type-2 [PacBio HiFi Init] 						[1-3]: createSubdir ccs samtoolsMerge bam2fasta createDB createStats
#type-3 [HiC - init]							[1-1]: createStats 
#type-4 [Bionano - init]						[1-1]: createStats???
#type-5 [10x - de novo] 						[1-1]: 01_supernova
#type-6 [10x|HiC - kmer-Gsize estimate] 		[1-2]: 01_genomescope
#type-7 [allData - MASH CONTAMINATION SCREEN] 	[1-5]: 01_mashPrepare, 02_mashSketch, 03_mashCombine, 04_mashPlot, 05_mashScreen
#type-8 [10x - QV]   							[1-6]: 01_QVprepareInput, 02_QVlongrangerAlign, 03_QVcoverage, 04_QVfreebayes, 05_QVbcftools, 06_QVqv
init_type_0=(createSubdir longrangerBasic longrangerToScaff10Xinput bxcheck createStats)
init_type_1=(createSubdir bam2fasta createDB createStats)
init_type_2=(createSubdir ccs samtoolsMerge bam2fasta createDB createStats)
init_type_3=(createSubdir createStats)
init_type_4=(createSubdir createStats)
init_type_5=(createSubdir supernova)
init_type_6=(createSubdir genomescope)
init_type_7=(createSubdir mashPrepare mashSketch mashCombine mashPlot mashScreen)
init_type_8=(createSubdir QVprepareInput QVlongrangerAlign QVcoverage QVfreebayes QVbcftools QVqv)

### MITO ASSEMBLY PIPELINE

### LAS repeat masking
#type-0 - steps[1-14]: createSubdir DBdust Catrack datander TANmask Catrack daligner LAmerge LArepeat TKmerge daligner LAmerge LArepeat TKmerge
MaskRType_0=(createSubdir DBdust Catrack datander TANmask Catrack daligner LAmerge LArepeat TKmerge daligner LAmerge LArepeat TKmerge)

### LAS read patching 

### LAS repeat masking

### LAS scrubbing
#type-0 - steps[1-14]: dalign pipeline
#type-1 - steps[1-15]: repcomp pipeline
#type-2 - steps[1-15]: forcealign pipeline

ScrubType_0=(createSubdir daligner LAmerge LArepeat TKmerge TKcombine TKhomogenize TKcombine LAstitch LAq TKmerge LAgap LAq TKmerge)
ScrubType_1=(createSubdir LAseparate repcomp LAmerge LArepeat TKmerge TKcombine TKhomogenize TKcombine LAstitch LAq TKmerge LAgap LAq TKmerge)
ScrubType_2=(createSubdir LAseparate forcealign LAmerge LArepeat TKmerge TKcombine TKhomogenize TKcombine LAstitch LAq TKmerge LAgap LAq TKmerge)

### LAS filtering 
#FiltType_0 - steps[1-3]: default pipeline
#FiltType_1 - steps[1-3]: experimental pipeline 1
#FiltType_2 - steps[1-14]: experimental pipeline 2 (daccord)

FiltType_0=(createSubdir LAfilter LAmerge)
FiltType_1=(createSubdir LAfilterChains LAmerge)
FiltType_2=(createSubdir computeIntrinsicQV Catrack lasdetectsimplerepeats mergeAndSortRepeats lasfilteralignments mergesym2 filtersym lasfilteralignmentsborderrepeats mergesym2 filtersym filterchainsraw LAfilter LAmerge)

### Touring
#TourType_0 - steps[1-5]: default pipeline 
TourType_0=(OGbuild OGtour tour2fasta OGlayout statistics)

### DAmar Correction 
#CorrType_0 - stepsp[1-5] 1-paths2rids, 2-LAcorrect, 3-prepDB, 4-tour2fasta, 5-statistics
CorrType_0=(paths2rids LAcorrect prepDB tour2fasta statistics)

### some general functions

function getNumOfDbBlocks()
{
    db=$1
    if [[ ! -f $db ]]
    then
        (>&2 echo "database $db not found")
        exit 1
    fi

    blocks=$(grep block $db | awk '{print $3}')
    if [[ ! -n $blocks ]]
    then 
        (>&2 echo "database $db has not been partitioned. Run DBsplit first!")
        exit 1
    fi 
    echo ${blocks}
}


function getStepName ()
{
 if [[ $# -ne 3 ]]
 then
   (>&2 echo "[ERROR] DAmar.cfg: getStepName() invalid number of arguments: Expected 3! ");
   exit 1
 fi
 TMP="${1}_type_${2}"
 if [[ -v "${!TMP}" ]]
 then
    (>&2 echo "[ERROR] DAmar.cfg: getStepName() $1 Type: ${TMP} is not available");
    exit 1
 fi
 if [[ $3 -lt 0 || $3 -ge $(eval echo \${#$(echo ${TMP})[@]}) ]]
 then 
    (>&2 echo "[ERROR] DAmar.cfg: getStepName() $1 Type: ${TMP}: Unsupported step $3! ${TMP} has only steps [1-$(eval echo \${#$(echo ${TMP})[@]}))");
    exit 1 
 fi;                    
 eval echo \${$(echo ${TMP})[${3:-@}]};
}

function isNumber 
{
  re='^[0-9]+$'
  if ! [[ $1 =~ $re ]]
  then
  (>&2 echo "[ERROR] DAmar.cfg: isNumber() Argument $1 is not a number!");
   exit 1
  fi
}


function prependZero ()
{
 	if [[ $# -ne 1 ]]
 	then 
	   (>&2 echo "[ERROR] DAmar.cfg: prependZero() invalid number of arguments: Expected 1! ");
   		exit 1
 	fi 
 	
 	isNumber $1
 	
 	if [[ $1 -lt 10 ]]
 	then
 		echo -n "0$1"
 	else
 		echo -n "$1"
 	fi 	
}


# file must be present 
function realpath()
{
	echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
}

function getPhaseFilePrefix()
{
	if [[ ${currentPhase} -eq 0 ]]
    then
        echo "qc"
	elif [[ ${currentPhase} -eq 1 ]]
    then
        echo "mito"
	elif [[ ${currentPhase} -eq 2 ]]
    then
        echo "cover"	
    elif [[ ${currentPhase} -eq 3 || ${currentPhase} -eq 5 ]]
    then
        echo "mask"
    elif [[ ${currentPhase} -eq 4 ]]
    then
        echo "fix"
    elif [[ ${currentPhase} -eq 6 ]]
    then
        echo "scrub"
    elif [[ ${currentPhase} -eq 7 ]]
    then
      	echo "filt"
    elif [[ ${currentPhase} -eq 8 ]]
    then
        echo "tour"
    elif [[ ${currentPhase} -eq 9 ]]
    then
        echo "corr"
    elif [[ ${currentPhase} -eq 10 ]]
    then
        echo "cont"
    elif [[ ${currentPhase} -eq 11 ]]
    then
        echo "arrow"
    elif [[ ${currentPhase} -eq 12 ]]
    then
        echo "purgeHaplotigs"       
    elif [[ ${currentPhase} -eq 13 ]]
    then
        echo "freebayes"                     
    elif [[ ${currentPhase} -eq 14 ]]
    then
        echo "phase"                     
    elif [[ ${currentPhase} -eq 15 ]]
    then
        echo "10x"                     
    elif [[ ${currentPhase} -eq 16 ]]
    then
        echo "bionano"
    elif [[ ${currentPhase} -eq 17 ]]
    then
        echo "hic"                     
    else
        (>&2 echo "[ERROR] DAmar_slurm: unknown phase ${currentPhase}! Supported values (0-qc, 1-mito, 2-cover, 3-mask, 4-fix, 5-mask, 6-scrub, 7-filt, 8-tour, 9-corr, 10-cont, 11-arrow, 12-purgeHaplotigs, 13-freebayes, 14-phase, 15-10x, 16-bionano, 17-hic)")
        exit 1
    fi
}
