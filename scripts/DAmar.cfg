#!/bin/bash -e

### expect assembly-specific config file as argument 
cfg=$1 

if [[ ! -f ${cfg} ]]
then 
	(>&2 echo "DAmar.cfg requires the assembly-specific config file as argument! See exampleConfig.sh in the scripts directory ${SUBMIT_SCRIPTS_PATH}!")
     exit 1
fi

source ${cfg}

# always set current working directory (is required in most steps of each pipeline)
myCWD=$(pwd)

# set some default variables
if [[ -z ${FIX_DALIGN_OUTDIR} ]]
then
	FIX_DALIGN_OUTDIR="dalign"
fi

if [[ -z ${FIX_REPCOMP_OUTDIR} ]]
then
	FIX_REPCOMP_OUTDIR="repcomp"
fi

if [[ -z ${FIX_FORCEALIGN_OUTDIR} ]]
then
	FIX_FORCEALIGN_OUTDIR="forcealign"
fi

# todo: only set this for appropriate phases
if [[ ${FIX_SCRUB_TYPE} -eq 0 ]]
then 
	FIX_SCRUB_NAME="${FIX_DALIGN_OUTDIR}"
elif [[ ${FIX_SCRUB_TYPE} -eq 1 ]]
then 
	FIX_SCRUB_NAME="${FIX_REPCOMP_OUTDIR}"
elif [[ ${FIX_SCRUB_TYPE} -eq 2 ]]
then 
	FIX_SCRUB_NAME="${FIX_FORCEALIGN_OUTDIR}"
else
	(>&2 echo "ERROR - Scrubbing Type: ${FIX_SCRUB_TYPE} unsupported!")
    exit 1		
fi

if [[ -z ${COR_DIR} ]]
then 
    COR_DIR=correction
fi

### available pipelines 

### LAS repeat masking

### LAS read patching 

### LAS repeat masking

### LAS scrubbing
#type-0 - steps[1-14]: dalign pipeline
#type-1 - steps[1-15]: repcomp pipeline
#type-2 - steps[1-15]: forcealign pipeline

ScrubType_0=(createSubdir daligner LAmerge LArepeat TKmerge TKcombine TKhomogenize TKcombine LAstitch LAq TKmerge LAgap LAq TKmerge)
ScrubType_1=(createSubdir LAseparate repcomp LAmerge LArepeat TKmerge TKcombine TKhomogenize TKcombine LAstitch LAq TKmerge LAgap LAq TKmerge)
ScrubType_2=(createSubdir LAseparate forcealign LAmerge LArepeat TKmerge TKcombine TKhomogenize TKcombine LAstitch LAq TKmerge LAgap LAq TKmerge)

### LAS filtering 
#FiltType_0 - steps[1-3]: default pipeline
#FiltType_1 - steps[1-3]: experimental pipeline 1
#FiltType_2 - steps[1-14]: experimental pipeline 2 (daccord)

FiltType_0=(createSubdir LAfilter LAmerge)
FiltType_1=(createSubdir LAfilterChains LAmerge)
FiltType_2=(createSubdir computeIntrinsicQV Catrack lasdetectsimplerepeats mergeAndSortRepeats lasfilteralignments mergesym2 filtersym lasfilteralignmentsborderrepeats mergesym2 filtersym filterchainsraw LAfilter LAmerge)

### Touring
#TourType_0 - steps[1-5]: default pipeline 
TourType_0=(OGbuild OGtour tour2fasta OGlayout statistics)

### DAmar Correction 
#CorrType_0 - stepsp[1-5] 1-paths2rids, 2-LAcorrect, 3-prepDB, 4-tour2fasta, 5-statistics
CorrType_0=(paths2rids LAcorrect prepDB tour2fasta statistics)

### some general functions

function getNumOfDbBlocks()
{
    db=$1
    if [[ ! -f $db ]]
    then
        (>&2 echo "database $db not found")
        exit 1
    fi

    blocks=$(grep block $db | awk '{print $3}')
    if [[ ! -n $blocks ]]
    then 
        (>&2 echo "database $db has not been partitioned. Run DBsplit first!")
        exit 1
    fi 
    echo ${blocks}
}


function getStepName ()
{
 if [[ $# -ne 3 ]]
 then
   (>&2 echo "[ERROR] DAmar.cfg: getStepName() invalid number of arguments: Expected 3! ");
   exit 1
 fi
 TMP="${1}Type_${2}"
 if [[ -v "${!TMP}" ]]
 then
    (>&2 echo "[ERROR] DAmar.cfg: getStepName() $1 Type: ${TMP} is not available");
    exit 1
 fi
 if [[ $3 -lt 0 || $3 -ge $(eval echo \${#$(echo ${TMP})[@]}) ]]
 then 
    (>&2 echo "[ERROR] DAmar.cfg: getStepName() $1 Type: ${TMP}: Unsupported step $3! ${TMP} has only steps [1-$(eval echo \${#$(echo ${TMP})[@]}))");
    exit 1 
 fi;                    
 eval echo \${$(echo ${TMP})[${3:-@}]};
}

function prependZero ()
{
 	if [[ $# -ne 1 ]]
 	then 
	   (>&2 echo "[ERROR] DAmar.cfg: prependZero() invalid number of arguments: Expected 1! ");
   		exit 1
 	fi 
 	
 	re='^[0-9]+$'
	if ! [[ $1 =~ $re ]]
	then
   		(>&2 echo "[ERROR] DAmar.cfg: prependZero() Argument $1 is not a number!");
   		exit 1
	fi
 	
 	if [[ $1 -lt 10 ]]
 	then
 		echo -n "0$1"
 	else
 		echo -n "$1"
 	fi 	
}